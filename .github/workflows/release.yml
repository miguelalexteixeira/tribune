name: release

on:
   workflow_dispatch:
      inputs:
         version:
            description: "The release version"
            required: true
         branch:
            description: "The branch to release from"
            required: true
            default: 'master'

jobs:
   linux:
      runs-on: ubuntu-latest
      steps:
         -  name: Checkout the repo
            uses: actions/checkout@v3
            with:
               fetch-depth: 0
               ref: ${{ github.event.inputs.branch }}

         -  name: Setup JDK
            uses: actions/setup-java@v3
            with:
               distribution: 'adopt'
               java-version: '11'

         -  uses: gradle/gradle-build-action@v2

         -  name: Release
            run: ./gradlew publish

         -  name: Bundle the build report
            if: failure()
            run: find . -type d -name 'reports' | zip -@ -r build-reports.zip

         -  name: Upload the build report
            if: failure()
            uses: actions/upload-artifact@v3
            with:
               name: error-report
               path: build-reports.zip

         -  name: tag release
            run: |
               git tag v${{ github.event.inputs.version }}
               git push --tags
   mac:
      runs-on: macos-11
      strategy:
         max-parallel: 4
         fail-fast: false
         matrix:
            target:
               - publishMacosX64PublicationToDeployRepository
               - publishMacosArm64PublicationToDeployRepository
               - publishIosX64PublicationToDeployRepository
               - publishIosSimulatorArm64PublicationToDeployRepository
               - publishIosArm64PublicationToDeployRepository
               - publishIosArm32PublicationToDeployRepository
               - publishTvosX64PublicationToDeployRepository
               - publishTvosArm64PublicationToDeployRepository
               - publishWatchosArm32PublicationToDeployRepository
               - publishWatchosArm64PublicationToDeployRepository
               - publishWatchosX86PublicationToDeployRepository
               - publishWatchosX64PublicationToDeployRepository

      steps:
         -  name: Checkout the repo
            uses: actions/checkout@v3
            with:
               fetch-depth: 0
               ref: ${{ github.event.inputs.branch }}

         -  name: Setup JDK
            uses: actions/setup-java@v3
            with:
               distribution: 'adopt'
               java-version: '11'

         -  uses: gradle/gradle-build-action@v2

         -  name: Release
            run: ./gradlew ${{ matrix.target }}

         -  name: Bundle the build report
            if: failure()
            run: find . -type d -name 'reports' | zip -@ -r build-reports.zip

         -  name: Upload the build report
            if: failure()
            uses: actions/upload-artifact@v3
            with:
               name: error-report
               path: build-reports.zip

   windows:
      runs-on: windows-latest
      steps:
         -  name: Checkout the repo
            uses: actions/checkout@v3
            with:
               fetch-depth: 0
               ref: ${{ github.event.inputs.branch }}

         -  name: Setup JDK
            uses: actions/setup-java@v3
            with:
               distribution: 'adopt'
               java-version: '11'

         -  uses: gradle/gradle-build-action@v2

         -  name: Release
            run: ./gradlew publishMingwX64PublicationToDeployRepository

         -  name: Bundle the build report
            if: failure()
            run: find . -type d -name 'reports' | zip -@ -r build-reports.zip

         -  name: Upload the build report
            if: failure()
            uses: actions/upload-artifact@v3
            with:
               name: error-report
               path: build-reports.zip

env:
   GRADLE_OPTS: -Dorg.gradle.configureondemand=true -Dorg.gradle.parallel=false -Dorg.gradle.jvmargs="-Xmx3g -XX:MaxPermSize=2048m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8"
   RELEASE_VERSION: ${{ github.event.inputs.version }}
   OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
   OSSRH_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
   ORG_GRADLE_PROJECT_signingKey: ${{ secrets.SIGNING_KEY }}
   ORG_GRADLE_PROJECT_signingPassword: ${{ secrets.SIGNING_PASSWORD }}
